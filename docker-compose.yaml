services:
  ######################################################################################################################
  # Microservices
  ######################################################################################################################
  location-service:
    image: positionpal/location-service:3.0.2@sha256:a057d90e1f367c3a7a5a6a398e8638216c69f324f0606cf7c7e30b53cbb52cd6
    container_name: location-service
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      cassandra-db:
        condition: service_healthy
      cassandra-init:
        condition: service_completed_successfully
    environment:
      MAPBOX_API_KEY: ${MAPBOX_API_KEY}
      AKKA_LICENSE_KEY: ${AKKA_LICENSE_KEY}
      RABBITMQ_HOST: rabbitmq-broker
      RABBITMQ_VIRTUAL_HOST: /
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: admin
      GRPC_PORT: 5052
      HTTP_PORT: 8080
      PRODUCTION: false
      CASSANDRA_CONTACT_POINT: cassandra-db:9042
      CASSANDRA_USERNAME: cassandra
      CASSANDRA_PASSWORD: cassandra
    networks:
      - back-tier

  # notification-service:
  #   image: positionpal/notification-service:2.1.2
  #   container_name: notification-service
  #   depends_on:
  #     rabbitmq-broker:
  #       condition: service_healthy
  #     postgres-db:
  #       condition: service_healthy
  #   environment:
  #     RABBITMQ_HOST: rabbitmq-broker
  #     RABBITMQ_VIRTUAL_HOST: /
  #     RABBITMQ_USERNAME: guest
  #     RABBITMQ_PASSWORD: admin
  #     RABBITMQ_PORT: 5672
  #     POSTGRES_USERNAME: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_HOST: postgres-db
  #     POSTGRES_PORT: 5432
  #     GRPC_PORT: 5052
  #     FIREBASE_SERVICE_ACCOUNT_FILE_PATH: /service-account.json
  #   volumes:
  #     - ./secrets/service-account.json:/service-account.json
  #   networks:
  #     - back-tier

  user-service:
    image: positionpal/user-service:1.2.1@sha256:ee771e8e8eaab588e6fb02d2524d281f9ed9b80a76bf2866b358f002677a2b30
    container_name: user-service
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq-broker:
        condition: service_healthy
    environment:
      POSTGRES_DB: "users_and_groups"
      POSTGRES_HOST: postgres-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      JWT_SECRET: mUOoxn4zZQU6Vbpe1WFO7wou5YZe5zbsoSLVSlMGn4I= # don't worry, no secret exposed. This was randomly generated and is not used in production!
      RABBITMQ_HOST: rabbitmq-broker
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: admin
      USER_SERVICE_PORT: 5052
    networks:
      - back-tier

  gateway:
    image: positionpal/gateway:2.0.1@sha256:a18e62c76fd3529a3601accebffadd47ba79a9602d29b1357b9de050a61157fe
    container_name: gateway
    depends_on:
      - user-service
      - location-service
      #- notification-service
    ports:
      - "3000:3000"
    environment:
      LOCATION_SERVICE_HTTP_URL: location-service:8080
      LOCATION_SERVICE_GRPC_URL: location-service:5052
      USER_SERVICE_URL: user-service:5052
    networks:
      - back-tier
      - front-tier

  ######################################################################################################################
  # Infrastructure components
  ######################################################################################################################
  cassandra-db:
    image: cassandra:latest@sha256:d0842d5c4fdf3ff5426cb90ab0340c1cd08c8fbf6bf330f0119e6873dca9bff8
    container_name: cassandra-db
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 5s
      timeout: 5s
      retries: 60
    networks:
      - back-tier

  cassandra-init:
    image: cassandra:latest@sha256:d0842d5c4fdf3ff5426cb90ab0340c1cd08c8fbf6bf330f0119e6873dca9bff8
    container_name: cassandra-init
    depends_on:
      cassandra-db:
        condition: service_healthy
    volumes:
      - ./scripts/init-cassandra.sh:/init.sh
    command: ["/bin/bash", "/init.sh"]
    networks:
      - back-tier

  rabbitmq-broker:
    image: rabbitmq:4-management@sha256:4a2b95d53111fe589fb44b5152ff87253c63eb227eee21f39494f64d9d96c0b2
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: admin
    # ports:
    #   - "15672:15672" # the port the dashboard web service will be available from, for debugging
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - back-tier

  postgres-db:
    image: postgres:17.2@sha256:87ec5e0a167dc7d4831729f9e1d2ee7b8597dcc49ccd9e43cc5f89e808d2adae
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./.tmp/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres'"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - back-tier

networks:
  back-tier:
    driver: bridge
    internal: false
  front-tier:
    driver: bridge
    internal: false
